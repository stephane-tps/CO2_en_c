Objectif du projet (à la fin du projet les étudiants sauront réaliser un...)

    - Construire une application lourde en C

Descriptif détaillé

    Sujet libre à faire valider, à condition que celui-ci respecte obligatoirement les règles suivantes:
    - il doit obligatoirement y avoir une gestion de base de données (création, CRUD, ...),
    - il doit y avoir un fichier de configuration chargé au lancement de l'application (configuration des droits,
    des touches, des chemins d'accès, des URLs, des paramètres d'initialisation divers) au format suivant :
    [groupe 1 de propriétés]
    nom11 prop11 : valeur11
    nom12 prop12 : valeur12
    ...
    nom1n prop1n : valeur1n
    [groupe 2 de propriétés]
    nom21 prop21 : valeur21
    nom22 prop22 : valeur22
    ...
    nom2n prop2n : valeur2n
    ...
    Ce point est indépendant du point précédent
    - il doit y avoir une utilisation de la bibliothèque CURL (pour faire du webscrapping par exemple)
    - l'exécution de l'application doit pouvoir se faire soit en mode texte (sur la console, avec des paramètres),
    soit en mode graphique (GtK, SDL, Allegro, SFML ou autre)
    - l'outil proposé doit être personnel et ne doit pas être une redite d'un outil existant (par exemple,
    interdiction absolue des "trucs en thèque", des tchats dont le code est fourni à peu près partout, des jeux
    standards-mario, bomberman ...-, de gestion ou de planification d'école); il n'est pas non plus possible de
    se servir du sujet de projet de Sécurité.
    Des exemples : un contrôleur électronique (entrées sorties du personnel, cartes RFID, ...), un simulateur
    algorithmique complet, un outil de planification, un générateur de modèle de bases de données, un
    générateur de CRUD SQL, un système d'aide à la décision, un programme d'entrainement sportif avec IA,
    un analyseur syntaxique de langage, ...


    étape 1

        Liste des fonctionnalités détaillées complètes
        Fourniture autres outils (schéma base, les exemples sur les
        bibliothèques utilisées doivent être fournis…)
        Avoir testé une bibliothèque de SGBD
        Il faudra faire dans l'un des cours de fin novembre-début
        décembre au moins une démonstration de ce qui est codé

    étape 2

        Description
        Fichier zip contenant l'Intégralité des fichiers du logiciel :
        - sources, bibliothèques sur la plate-forme de projet,
        - drivers, dll, bibliothèques dynamiques ...
        - base de données si nécessaire sous la forme d'un fichier
        texte à importer
        - installeur automatique de logiciel

        Dossier technique complet
        Dossier utilisation
        Tableau de répartition du travail


NOTRE PROJET

Nous souhaitons créer un logiciel permettant de calculer les émissions de carbone d'un trajet, en évaluant avec plusieurs moyens de transports.

                    Buts principaux du logiciel :
                    - Calcul d'émissions de CO2
                    - Simulation d'un trajet quotidien
                    - Comparaison avec d'autres utilisateurs
                    - Astuces et conseils pour polluer moins
                    - Équivalents de pollution plus parlants


                    - un dossier bin pour les exécutables ;
                    - un dossier lib pour les dépendances ;
                    - un dossier include pour les fichiers d'en-têtes de la bibliothèque ;
                    - un dossier src pour les sources (.cpp et .h) ;
                    - un dossier doc pour la documentation ;
                    - un fichier Makefile/CMake/de projet pour compiler ;
                    - un README ;
                    - un fichier INSTALL décrivant la procédure d’installation ;
                    - un dossier datafile/ressources pour tous les fichiers sons/images.